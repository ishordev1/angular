{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common/http\";\nexport class EmployeeService {\n  constructor(fb, http) {\n    this.fb = fb;\n    this.http = http;\n    this.baseURL = 'http://localhost:3000/api/employees/';\n    this.list = [];\n    this.employeeForm = this.fb.group({\n      _id: [''],\n      fullName: ['', Validators.required],\n      position: ['', Validators.required],\n      location: [''],\n      salary: ['', Validators.required]\n    });\n  }\n  fetchEmployeeList() {\n    this.http.get(this.baseURL).pipe(catchError(this.errorHandler)).subscribe(data => {\n      this.list = data;\n    });\n  }\n  postEmployee() {\n    return this.http.post(this.baseURL, this.employeeForm.value).pipe(catchError(this.errorHandler));\n  }\n  putEmployee() {\n    return this.http.put(this.baseURL + this.employeeForm.get('_id')?.value, this.employeeForm.value).pipe(catchError(this.errorHandler));\n  }\n  deleteEmployee(_id) {\n    return this.http.delete(this.baseURL + _id).pipe(catchError(this.errorHandler));\n  }\n  errorHandler(error) {\n    if (error.status === 0) {\n      console.error('An error occurred:', error.error);\n    } else {\n      console.error(`Backend returned code ${error.status}, body was: `, error.error);\n    }\n    return throwError(() => new Error('Something bad happened; please try again later.'));\n  }\n}\nEmployeeService.ɵfac = function EmployeeService_Factory(t) {\n  return new (t || EmployeeService)(i0.ɵɵinject(i1.FormBuilder), i0.ɵɵinject(i2.HttpClient));\n};\nEmployeeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmployeeService,\n  factory: EmployeeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAsBA,UAAU,QAAQ,gBAAgB;AACxD,SAASC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;;AAM7C,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,EAAe,EAAUC,IAAgB;IAAzC,OAAE,GAAFD,EAAE;IAAuB,SAAI,GAAJC,IAAI;IAExC,YAAO,GAAG,sCAAsC;IACzD,SAAI,GAAe,EAAE;IAErB,iBAAY,GAAG,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MAC3BC,GAAG,EAAE,CAAC,EAAE,CAAC;MACTC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ,CAAC;MACnCE,QAAQ,EAAE,CAAC,EAAE,CAAC;MACdC,MAAM,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACU,QAAQ;KACjC,CAAC;EAX+D;EAajEI,iBAAiB;IACf,IAAI,CAACR,IAAI,CAACS,GAAG,CAAC,IAAI,CAACC,OAAO,CAAC,CACxBC,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAAC,CACnCC,SAAS,CAACC,IAAI,IAAG;MAChB,IAAI,CAACC,IAAI,GAAGD,IAAkB;IAChC,CAAC,CAAC;EAEN;EAGAE,YAAY;IACV,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAC,IAAI,CAACP,OAAO,EAAE,IAAI,CAACQ,YAAY,CAACC,KAAK,CAAC,CACzDR,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAAC;EACxC;EAEAQ,WAAW;IACT,OAAO,IAAI,CAACpB,IAAI,CAACqB,GAAG,CAAC,IAAI,CAACX,OAAO,GAAG,IAAI,CAACQ,YAAY,CAACT,GAAG,CAAC,KAAK,CAAC,EAAEU,KAAK,EAAE,IAAI,CAACD,YAAY,CAACC,KAAK,CAAC,CAC9FR,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAAC;EACxC;EAEAU,cAAc,CAACpB,GAAW;IACxB,OAAO,IAAI,CAACF,IAAI,CAACuB,MAAM,CAAC,IAAI,CAACb,OAAO,GAAGR,GAAG,CAAC,CACxCS,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,YAAY,CAAC,CAAC;EACxC;EAGQA,YAAY,CAACY,KAAwB;IAC3C,IAAIA,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE;MACtBC,OAAO,CAACF,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACA,KAAK,CAAC;KACjD,MAAM;MACLE,OAAO,CAACF,KAAK,CACX,yBAAyBA,KAAK,CAACC,MAAM,cAAc,EAAED,KAAK,CAACA,KAAK,CAAC;;IAErE,OAAO5B,UAAU,CAAC,MAAM,IAAI+B,KAAK,CAAC,iDAAiD,CAAC,CAAC;EACvF;;AAjDW9B,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAA+B,SAAf/B,eAAe;EAAAgC,YAFd;AAAM","names":["Validators","catchError","throwError","EmployeeService","constructor","fb","http","group","_id","fullName","required","position","location","salary","fetchEmployeeList","get","baseURL","pipe","errorHandler","subscribe","data","list","postEmployee","post","employeeForm","value","putEmployee","put","deleteEmployee","delete","error","status","console","Error","factory","providedIn"],"sourceRoot":"","sources":["D:\\git project\\angular\\MEAN-Stack-CRUD-with-Angular-15\\client\\src\\app\\shared\\employee.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { catchError, throwError } from 'rxjs';\r\nimport { Employee } from './employee.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EmployeeService {\r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient) { }\r\n\r\n  readonly baseURL = 'http://localhost:3000/api/employees/';\r\n  list: Employee[] = [];\r\n\r\n  employeeForm = this.fb.group({\r\n    _id: [''],\r\n    fullName: ['', Validators.required],\r\n    position: ['', Validators.required],\r\n    location: [''],\r\n    salary: ['', Validators.required],\r\n  })\r\n\r\n  fetchEmployeeList() {\r\n    this.http.get(this.baseURL)\r\n      .pipe(catchError(this.errorHandler))\r\n      .subscribe(data => {\r\n        this.list = data as Employee[];\r\n      })\r\n\r\n  }\r\n\r\n\r\n  postEmployee() {\r\n    return this.http.post(this.baseURL, this.employeeForm.value)\r\n      .pipe(catchError(this.errorHandler))\r\n  }\r\n\r\n  putEmployee() {\r\n    return this.http.put(this.baseURL + this.employeeForm.get('_id')?.value, this.employeeForm.value)\r\n      .pipe(catchError(this.errorHandler))\r\n  }\r\n\r\n  deleteEmployee(_id: string) {\r\n    return this.http.delete(this.baseURL + _id)\r\n      .pipe(catchError(this.errorHandler))\r\n  }\r\n\r\n\r\n  private errorHandler(error: HttpErrorResponse) {\r\n    if (error.status === 0) {\r\n      console.error('An error occurred:', error.error);\r\n    } else {\r\n      console.error(\r\n        `Backend returned code ${error.status}, body was: `, error.error);\r\n    }\r\n    return throwError(() => new Error('Something bad happened; please try again later.'));\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}